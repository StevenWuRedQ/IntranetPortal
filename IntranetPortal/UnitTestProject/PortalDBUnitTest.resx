<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CleaningDataTest_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/
DECLARE @RC AS INT, @RC_old as int;
select @RC=0;	   

EXEC [dbo].[ArchiveByBBLE] 

select @RC = @RC +count(*) from Leads where BBLE in (select bble from ClearBBLEs)
select @RC = @RC +count(*) from [dbo].[LeadsActivityLog] where BBLE in (select bble from ClearBBLEs)
select @RC = @RC +count(*) from [dbo].[HomeOwnerAddress] where BBLE in (select bble from ClearBBLEs)
select @RC = @RC +count(*) from [dbo].[HomeOwnerPhone] where BBLE in (select bble from ClearBBLEs)
select @RC = @RC +count(*) from [dbo].[LeadsComments] where BBLE in (select bble from ClearBBLEs)
select @RC = @RC +count(*) from [dbo].[OwnerContacts] where BBLE in (select bble from ClearBBLEs)
select @RC_old = @RC

--select @RC=0
--select @RC = @RC +count(*) from Leads where BBLE = @bble
--select @RC = @RC +count(*) from [dbo].LeadsActivityLogArchived where bble = @bble
--select @RC = @RC +count(*) from [dbo].HomeOwnerAddressArchive where bble = @bble
--select @RC = @RC +count(*) from [dbo].HomeOwnerPhoneArchived where bble = @bble
----select @RC = @RC +count(*) from [dbo].[HomeOwnerEmail] where bble=@bble
--select @RC = @RC +count(*) from [dbo].OwnerContactsArchived where bble=@bble

select @RC as RC
</value>
  </data>
  <data name="PoolA1Testing_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Testing Leads_A1_Pool data quality
*/
DECLARE @RC AS INT, @Count1 as int, @Count2 as int;
select @RC=0;

--check data ECBViolations
select @RC = @RC +count(*) from leads_A1_Pool where ECBViolationsAmt &gt; 250000
select @RC = @RC +count(*) from leads_A1_Pool where ECBViolationsAmt &gt; 150000 and (Borough = 4 or Borough = 2)
select @RC = @RC +count(*) from Leads_Last_LP_Date where BBLE in (select BBLE from leads_A1_Pool) and FileDate &lt; '2010/1/1'
select @RC = @RC +count(*) from leads_A1_Pool 
where PropertyClass not like 'A%' and propertyclass not like 'B%' and PropertyClass not in ('C0','C3')

--check deed_data&gt;LP_Date
select @RC = @RC + count(*) from Leads_38K_Loop_Info_View lv, leads_A2_Pool a2 where lv.bble=a2.bble and lv.[DEED_DATE] &gt; lv.[FileDate]
select @Count1 = count(*) from Leads_38K_Loop_Info_View lv, leads_A2_Pool a2 where lv.bble=a2.bble and (lv.[DEED_DATE] &lt;= lv.[FileDate] or lv.[Deed_Date] is null)
select @Count2 = count(*) from leads_A2_Pool

select @RC as RC
select iif(@Count1=@Count2, 'True', 'False') as Result</value>
  </data>
  <data name="PoolA2Test_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Testing Leads_A2_Pool data quality
*/
DECLARE @RC AS INT, @Count1 as int, @Count2 as int;
select @RC=0;

--check data ECBViolations
select @RC = @RC +count(*) from leads_A2_Pool where ECBViolationsAmt &gt; 250000
select @RC = @RC +count(*) from leads_A2_Pool where ECBViolationsAmt &gt; 150000 and (Borough = 4 or Borough = 2)

--check deed_data&gt;LP_Date
select @RC = @RC + count(*) from Leads_38K_Loop_Info_View lv, leads_A2_Pool a2 where lv.bble=a2.bble and lv.[DEED_DATE] &gt; lv.[FileDate]
select @Count1 = count(*) from Leads_38K_Loop_Info_View lv, leads_A2_Pool a2 where lv.bble=a2.bble and (lv.[DEED_DATE] &lt;= lv.[FileDate] or lv.[Deed_Date] is null)
select @Count2 = count(*) from leads_A2_Pool

select @RC = @RC +count(*) from Leads_Last_LP_Date where BBLE in (select BBLE from leads_A2_Pool) and FileDate &lt; '2010/1/1'
select @RC = @RC +count(*) from leads_A2_Pool where PropertyClass not like 'A%' and propertyclass not like 'B%' and PropertyClass not in ('C0','C3')
select @RC = @RC +count(*) from leads_A2_Pool  where [C1stServicer] = 'Seterus' and [C1stServicer] = 'Nationstar'

select @RC as RC
select iif(@Count1=@Count2, 'True', 'False') as Result</value>
  </data>
  <data name="AssignLeadsVerify_TestAction.SqlScript" xml:space="preserve">
    <value>DECLARE @RC AS INT, @Count1 as int, @Count2 as int;
select @RC=0;

--check data ECBViolations
select @RC = @RC +count(*) from LeadSendOutVerifyView where ECBViolationsAmt &gt; 250000
select @RC = @RC +count(*) from LeadSendOutVerifyView where ECBViolationsAmt &gt; 150000 and (Borough = 4 or Borough = 2)

--check deed_data&gt;LP_Date
select @RC = @RC + count(*) from Leads_38K_Loop_Info_View lv, LeadSendOutVerifyView a2 where lv.bble=a2.bble and lv.[DEED_DATE] &gt; lv.[FileDate]
select @Count1 = count(*) from Leads_38K_Loop_Info_View lv, LeadSendOutVerifyView a2 where lv.bble=a2.bble and (lv.[DEED_DATE] &lt;= lv.[FileDate] or lv.[Deed_Date] is null)
select @Count2 = count(*) from LeadSendOutVerifyView

select @RC = @RC +count(*) from Leads_Last_LP_Date where BBLE in (select BBLE from LeadSendOutVerifyView) and FileDate &lt; '2010/1/1'
--select @RC = @RC +count(*) from LeadSendOutVerifyView where PropertyClass not like 'A%' and propertyclass not like 'B%' and PropertyClass not in ('C0','C3')
select @RC = @RC +count(*) from LeadSendOutVerifyView  where [C1stServicer] like '%Seterus%' or [C1stServicer] like '%Nationstar%'

select @RC as RC
select iif(@Count1=@Count2, 'True', 'False') as Result</value>
  </data>
  <metadata name="$this.Localizable" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
</root>